---
import { artistsConfig, artistGroups } from '@/data/artists'
import { getEnrichedAlbums } from '@/lib/albums'
import { getDisplayAlbumType } from '@/types/albums'
import TitleDisplay from './TitleDisplay.astro'

const { song } = Astro.params
const [currentArtist, currentAlbum, currentSong] = song ? song.split('/') : []

// 按分組整理藝術家資料
const enrichedGroups = await Promise.all(
  Object.values(artistGroups)
    .sort((a, b) => a.order - b.order)
    .map(async (group) => {
      const groupArtists = await Promise.all(
        group.artistIds.map(async (artistId) => {
          const artist = artistsConfig[artistId]
          if (!artist) return null

          const albums = await getEnrichedAlbums(artistId)
          return albums.length > 0 ? { ...artist, albums } : null
        })
      )

      const validArtists = groupArtists.filter((artist): artist is NonNullable<typeof artist> =>
        Boolean(artist)
      )

      return validArtists.length > 0 ? { ...group, artists: validArtists } : null
    })
)

const validGroups = enrichedGroups.filter((g): g is NonNullable<typeof g> => Boolean(g))
---

<aside class="w-72 bg-white shadow-lg">
  <nav class="p-4">
    {
      validGroups.map((group) => (
        <div class="mb-8">
          {/* 分組標題 */}
          <div class="px-3 pt-2 pb-3 mb-2 bg-gradient-to-r from-gray-200 to-gray-100 rounded-lg border-l-4 border-blue-500">
            <h3 class="my-1 font-bold text-gray-800 text-base">{group.displayName}</h3>
            {group.description && <p class="text-xs text-gray-600 mt-1">{group.description}</p>}
          </div>

          {/* 分組內的藝術家 */}
          <div class="space-y-4">
            {group.artists.map((artistData) => (
              <div class="ml-2">
                <div class="px-2 py-2 mb-2 bg-gray-50 rounded border-l-2 border-gray-300">
                  <span class="font-medium text-sm text-gray-700">{artistData.displayName}</span>
                </div>
                <div class="space-y-2">
                  {artistData.albums.map((album) => {
                    const isCurrentAlbum =
                      currentArtist === artistData.pathname && currentAlbum === album.id

                    return (
                      <div class="ml-4">
                        <details open={isCurrentAlbum}>
                          <summary class="flex items-center justify-between w-full px-2 py-1 hover:bg-gray-100 rounded cursor-pointer">
                            <div class="flex flex-col">
                              {album.showTypeInNav && (
                                <span class="text-xs text-gray-600">
                                  {getDisplayAlbumType(album)}
                                </span>
                              )}
                              <TitleDisplay title={album.title} size="sm" />
                            </div>
                            <span class="text-xs text-gray-500">
                              {album.releaseMonth
                                ? `${album.releaseYear}.${String(album.releaseMonth).padStart(2, '0')}`
                                : album.releaseYear}
                            </span>
                          </summary>
                          <ul class="ml-4 mt-1">
                            {album.songs.map((song) => (
                              <li>
                                <a
                                  href={`${import.meta.env.BASE_URL}/${artistData.pathname}/${album.id}/${song.id}`}
                                  class={`block px-2 py-1 text-xs ${
                                    isCurrentAlbum && currentSong === song.id
                                      ? 'text-blue-600 font-semibold'
                                      : 'hover:text-blue-500'
                                  }`}
                                >
                                  <TitleDisplay title={song.meta.title} size="sm" />
                                </a>
                              </li>
                            ))}
                          </ul>
                        </details>
                      </div>
                    )
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    }
  </nav>
</aside>

<style>
  details > summary {
    list-style: none;
  }
  details > summary::-webkit-details-marker {
    display: none;
  }
</style>

<script>
  // 動態監聽路由變化，確保當前專輯始終展開
  window.addEventListener('popstate', () => {
    const [, _, album] = window.location.pathname.split('/')
    const details = document.querySelectorAll('details')
    details.forEach((detail) => {
      const albumLink = detail.querySelector('summary span.text-xs')
      detail.open =
        albumLink && albumLink.textContent ? albumLink.textContent.includes(album) : false
    })
  })
</script>
